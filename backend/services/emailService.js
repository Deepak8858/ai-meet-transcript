const nodemailer = require('nodemailer')
const fs = require('fs')
const path = require('path')

class EmailService {
  constructor() {
    this.transporter = null
    this.initializeTransporter()
  }

  initializeTransporter() {
    try {
      this.transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.GMAIL_USER,
          pass: process.env.GMAIL_APP_PASSWORD
        },
        secure: true,
        port: 465
      })

      // Verify connection configuration
      this.transporter.verify((error, success) => {
        if (error) {
          console.error('Email service configuration error:', error)
        } else {
          console.log('Email service is ready to send messages')
        }
      })
    } catch (error) {
      console.error('Failed to initialize email transporter:', error)
    }
  }

  async sendSummaryEmail(recipients, subject, summary, originalFileName = 'Meeting Notes') {
    if (!this.transporter) {
      throw new Error('Email service not initialized')
    }

    if (!recipients || recipients.length === 0) {
      throw new Error('No recipients provided')
    }

    if (!summary || !summary.trim()) {
      throw new Error('No summary content provided')
    }

    const htmlTemplate = this.getEmailTemplate()
    const formattedSummary = this.formatSummaryForEmail(summary)
    
    const mailOptions = {
      from: {
        name: 'AI Meeting Summarizer',
        address: process.env.GMAIL_USER
      },
      to: recipients.join(', '),
      subject: subject || `Meeting Summary - ${originalFileName}`,
      html: htmlTemplate
        .replace('{{SUBJECT}}', subject || `Meeting Summary - ${originalFileName}`)
        .replace('{{ORIGINAL_FILENAME}}', originalFileName)
        .replace('{{SUMMARY}}', formattedSummary)
        .replace('{{TIMESTAMP}}', new Date().toLocaleString()),
      text: this.generatePlainTextEmail(subject, summary, originalFileName)
    }

    try {
      const result = await this.transporter.sendMail(mailOptions)
      console.log('Email sent successfully:', result.messageId)
      return {
        success: true,
        messageId: result.messageId,
        recipients: recipients.length
      }
    } catch (error) {
      console.error('Failed to send email:', error)
      throw new Error(`Failed to send email: ${error.message}`)
    }
  }

  formatSummaryForEmail(summary) {
    // Convert markdown-like formatting to HTML
    let formatted = summary
      .replace(/\n\n/g, '</p><p>')
      .replace(/\n/g, '<br>')
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/^- (.*$)/gm, '<li>$1</li>')
      .replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>')

    return `<p>${formatted}</p>`
  }

  generatePlainTextEmail(subject, summary, originalFileName) {
    return `
Meeting Summary
===============

Subject: ${subject || `Meeting Summary - ${originalFileName}`}
Original File: ${originalFileName}
Generated: ${new Date().toLocaleString()}

Summary:
--------
${summary}

---
This summary was generated by AI Meeting Summarizer
`
  }

  getEmailTemplate() {
    return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{SUBJECT}}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 24px;
            font-weight: 600;
        }
        .content {
            padding: 30px;
        }
        .metadata {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            font-size: 14px;
        }
        .metadata strong {
            color: #495057;
        }
        .summary {
            background: #fff;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 20px;
            margin: 20px 0;
        }
        .summary p {
            margin: 0 0 15px 0;
        }
        .summary ul, .summary ol {
            margin: 15px 0;
            padding-left: 20px;
        }
        .summary li {
            margin: 5px 0;
        }
        .footer {
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            font-size: 12px;
            color: #6c757d;
            border-top: 1px solid #dee2e6;
        }
        .highlight {
            background: #fff3cd;
            padding: 2px 4px;
            border-radius: 3px;
        }
        @media (max-width: 600px) {
            body {
                padding: 10px;
            }
            .header, .content {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>{{SUBJECT}}</h1>
        </div>
        
        <div class="content">
            <div class="metadata">
                <strong>Original File:</strong> {{ORIGINAL_FILENAME}}<br>
                <strong>Generated:</strong> {{TIMESTAMP}}
            </div>
            
            <div class="summary">
                {{SUMMARY}}
            </div>
        </div>
        
        <div class="footer">
            This summary was generated by AI Meeting Summarizer<br>
            Powered by advanced AI technology
        </div>
    </div>
</body>
</html>
    `
  }

  async testConnection() {
    if (!this.transporter) {
      return { success: false, error: 'Email service not configured' }
    }

    try {
      await this.transporter.verify()
      return { success: true, message: 'Email service is ready' }
    } catch (error) {
      return { success: false, error: error.message }
    }
  }
}

module.exports = new EmailService()